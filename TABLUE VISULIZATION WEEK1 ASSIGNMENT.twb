<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20231.24.0424.0800                               -->
<workbook original-version='18.1' source-build='2023.1.12 (20231.24.0424.0800)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Life Expectancy+ (The Wealth of nations (1))' inline='true' name='federated.0o1qqnj1af7kci13xq4q90bpxh7c' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='The Wealth of nations (1)' name='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/DELL/Downloads/The Wealth of nations (1).xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8' name='GDP' table='[GDP$]' type='table'>
          <columns gridOrigin='A1:D229:no:A1:D229:0' header='yes' outcome='2'>
            <column datatype='integer' name='Rank' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
            <column datatype='date' date-parse-format='yyyy' name='Year of Information' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8' name='Life Expectancy' table='[&apos;Life Expectancy$&apos;]' type='table'>
            <columns gridOrigin='A1:D197:no:A1:D197:0' header='yes' outcome='6'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='Life expectancy at birth' ordinal='2' />
              <column datatype='integer' name='Date of Information' ordinal='3' />
            </columns>
          </relation>
          <relation connection='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8' name='GDP' table='[GDP$]' type='table'>
            <columns gridOrigin='A1:D229:no:A1:D229:0' header='yes' outcome='2'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
              <column datatype='date' date-parse-format='yyyy' name='Year of Information' ordinal='3' />
            </columns>
          </relation>
          <relation connection='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8' name='Smartphones' table='[Smartphones$]' type='table'>
            <columns gridOrigin='A1:D75:no:A1:D75:0' header='yes' outcome='6'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='integer' name='Smartphone Users' ordinal='2' />
              <column datatype='integer' name='Date of Information' ordinal='3' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[Country (GDP)]' value='[GDP].[Country]' />
          <map key='[Country (Smartphones)]' value='[Smartphones].[Country]' />
          <map key='[Country]' value='[Life Expectancy].[Country]' />
          <map key='[Date of Information (Smartphones)]' value='[Smartphones].[Date of Information]' />
          <map key='[Date of Information]' value='[Life Expectancy].[Date of Information]' />
          <map key='[GDP - per capita (PPP)]' value='[GDP].[GDP - per capita (PPP)]' />
          <map key='[Life expectancy at birth]' value='[Life Expectancy].[Life expectancy at birth]' />
          <map key='[Rank (GDP)]' value='[GDP].[Rank]' />
          <map key='[Rank (Smartphones)]' value='[Smartphones].[Rank]' />
          <map key='[Rank]' value='[Life Expectancy].[Rank]' />
          <map key='[Smartphone Users]' value='[Smartphones].[Smartphone Users]' />
          <map key='[Year of Information]' value='[GDP].[Year of Information]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life expectancy at birth</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life expectancy at birth]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Life expectancy at birth</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date of Information</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Date of Information]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Date of Information</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D197:no:A1:D197:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[GDP]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D229:no:A1:D229:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank (GDP)]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country (GDP)]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP - per capita (PPP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP - per capita (PPP)]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>GDP - per capita (PPP)</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year of Information</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Year of Information]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Year of Information</remote-alias>
            <ordinal>7</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank (Smartphones)]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country (Smartphones)]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Smartphone Users</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Smartphone Users]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Smartphone Users</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date of Information</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Date of Information (Smartphones)]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Date of Information</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D75:no:A1:D75:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country (GDP)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column aggregation='Sum' datatype='integer' name='[Date of Information]' role='dimension' type='ordinal' />
      <column aggregation='Sum' datatype='integer' name='[Rank (GDP)]' role='dimension' type='ordinal' />
      <column aggregation='Sum' datatype='integer' name='[Rank]' role='dimension' type='ordinal' />
      <column datatype='date' name='[Year of Information]' role='dimension' type='ordinal' />
      <_.fcp.ObjectModelTableType.true...column caption='GDP' datatype='table' name='[__tableau_internal_object_id__].[GDP_5274648EF25C4533ADBD37A62D53B10F]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Life Expectancy' datatype='table' name='[__tableau_internal_object_id__].[Life Expectancy_F69439302924412384AE3966F7D719C9]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Smartphones' datatype='table' name='[__tableau_internal_object_id__].[Smartphones_78F42251E0A145C4ABB3BE1202421DF2]' role='measure' type='quantitative' />
      <column-instance column='[Country (GDP)]' derivation='None' name='[none:Country (GDP):nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Year of Information]' derivation='None' name='[none:Year of Information:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Year of Information]' derivation='Year' name='[yr:Year of Information:ok]' pivot='key' type='ordinal' />
      <group caption='Action (Country (GDP),Country)' hidden='true' name='[Action (Country (GDP),Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country (GDP)]' />
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='100' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Year of Information:ok]' type='palette'>
            <map to='#499894'>
              <bucket>2015</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>2017</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>2005</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>#2018-01-01#</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>%null%</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>#2017-01-01#</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>2016</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>2006</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>2003</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>#2020-01-01#</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>2008</bucket>
            </map>
            <map to='#e15759'>
              <bucket>2018</bucket>
            </map>
            <map to='#e15759'>
              <bucket>#2016-01-01#</bucket>
            </map>
            <map to='#edc948'>
              <bucket>#2019-01-01#</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>2014</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2019</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>#2015-01-01#</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>2020</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>2004</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Europe and Central Asia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;DR Congo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arab States&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latin America and the Caribbean&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;East Asia and the Pacific&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sub-Saharan Africa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Asia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;East Timor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;São Tomé and Príncipe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country (GDP):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot; Monaco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;U.S. Virgin Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;East Timor&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Pierre and Miquelon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Vincent &amp; the Grenadines&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;DR Congo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;São Tomé and Príncipe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;EU&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[yr:Year of Information:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>2014</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>2020</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>2019</bucket>
            </map>
            <map to='#e15759'>
              <bucket>2018</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2015</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='GDP' id='GDP_5274648EF25C4533ADBD37A62D53B10F'>
            <properties context=''>
              <relation connection='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8' name='GDP' table='[GDP$]' type='table'>
                <columns gridOrigin='A1:D229:no:A1:D229:0' header='yes' outcome='2'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
                  <column datatype='date' date-parse-format='yyyy' name='Year of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='Life Expectancy' id='Life Expectancy_F69439302924412384AE3966F7D719C9'>
            <properties context=''>
              <relation connection='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8' name='Life Expectancy' table='[&apos;Life Expectancy$&apos;]' type='table'>
                <columns gridOrigin='A1:D197:no:A1:D197:0' header='yes' outcome='6'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='Life expectancy at birth' ordinal='2' />
                  <column datatype='integer' name='Date of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='Smartphones' id='Smartphones_78F42251E0A145C4ABB3BE1202421DF2'>
            <properties context=''>
              <relation connection='excel-direct.0c0p22h0bvvyg61ac2xdj1ruybs8' name='Smartphones' table='[Smartphones$]' type='table'>
                <columns gridOrigin='A1:D75:no:A1:D75:0' header='yes' outcome='6'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='integer' name='Smartphone Users' ordinal='2' />
                  <column datatype='integer' name='Date of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (GDP)]' />
            </expression>
            <first-end-point object-id='Life Expectancy_F69439302924412384AE3966F7D719C9' />
            <second-end-point object-id='GDP_5274648EF25C4533ADBD37A62D53B10F' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (Smartphones)]' />
            </expression>
            <first-end-point object-id='Life Expectancy_F69439302924412384AE3966F7D719C9' />
            <second-end-point object-id='Smartphones_78F42251E0A145C4ABB3BE1202421DF2' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='GDP (The Wealth of nations (1))' inline='true' name='federated.1q0gt0g0mrilad1ekhlfg1yvhifc' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='The Wealth of nations (1)' name='excel-direct.0chyjq41ly7jmr1fbro760wfy1k0'>
            <connection class='excel-direct' cleaning='yes' compat='no' dataRefreshTime='' filename='C:/Users/DELL/Downloads/The Wealth of nations (1).xlsx' interpretationMode='1' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0chyjq41ly7jmr1fbro760wfy1k0' name='GDP' table='[GDP$]' type='table'>
          <columns gridOrigin='A1:D229:no:A1:D229:1' header='yes' lost='0' outcome='1' processed='684'>
            <column datatype='integer' name='Rank' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
            <column datatype='integer' name='Year of Information' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='excel-direct.0chyjq41ly7jmr1fbro760wfy1k0' name='GDP' table='[GDP$]' type='table'>
            <columns gridOrigin='A1:D229:no:A1:D229:1' header='yes' lost='0' outcome='1' processed='684'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
              <column datatype='integer' name='Year of Information' ordinal='3' />
            </columns>
          </relation>
          <relation connection='excel-direct.0chyjq41ly7jmr1fbro760wfy1k0' name='Life Expectancy' table='[&apos;Life Expectancy$&apos;]' type='table'>
            <columns gridOrigin='A1:D197:no:A1:D197:1' lost='0' outcome='1' processed='588'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='Life expectancy at birth' ordinal='2' />
              <column datatype='integer' name='Date of Information' ordinal='3' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[Country (Life Expectancy)]' value='[Life Expectancy].[Country]' />
          <map key='[Country]' value='[GDP].[Country]' />
          <map key='[Date of Information]' value='[Life Expectancy].[Date of Information]' />
          <map key='[GDP - per capita (PPP)]' value='[GDP].[GDP - per capita (PPP)]' />
          <map key='[Life expectancy at birth]' value='[Life Expectancy].[Life expectancy at birth]' />
          <map key='[Rank (Life Expectancy)]' value='[Life Expectancy].[Rank]' />
          <map key='[Rank]' value='[GDP].[Rank]' />
          <map key='[Year of Information]' value='[GDP].[Year of Information]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[GDP]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D229:no:A1:D229:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>684</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D197:no:A1:D197:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>588</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_B1BCB4D6209545219EBF59154B5CB489]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_B1BCB4D6209545219EBF59154B5CB489]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP - per capita (PPP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP - per capita (PPP)]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>GDP - per capita (PPP)</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_B1BCB4D6209545219EBF59154B5CB489]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year of Information</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year of Information]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Year of Information</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_B1BCB4D6209545219EBF59154B5CB489]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank (Life Expectancy)]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_8E4AD5682002488BB5AB3A09AE2FC0EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country (Life Expectancy)]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_8E4AD5682002488BB5AB3A09AE2FC0EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life expectancy at birth</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life expectancy at birth]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Life expectancy at birth</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_8E4AD5682002488BB5AB3A09AE2FC0EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date of Information</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Date of Information]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Date of Information</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_8E4AD5682002488BB5AB3A09AE2FC0EA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country (Life Expectancy)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='GDP' datatype='table' name='[__tableau_internal_object_id__].[GDP_B1BCB4D6209545219EBF59154B5CB489]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Life Expectancy' datatype='table' name='[__tableau_internal_object_id__].[Life Expectancy_8E4AD5682002488BB5AB3A09AE2FC0EA]' role='measure' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='GDP' id='GDP_B1BCB4D6209545219EBF59154B5CB489'>
            <properties context=''>
              <relation connection='excel-direct.0chyjq41ly7jmr1fbro760wfy1k0' name='GDP' table='[GDP$]' type='table'>
                <columns gridOrigin='A1:D229:no:A1:D229:1' header='yes' lost='0' outcome='1' processed='684'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
                  <column datatype='integer' name='Year of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='Life Expectancy' id='Life Expectancy_8E4AD5682002488BB5AB3A09AE2FC0EA'>
            <properties context=''>
              <relation connection='excel-direct.0chyjq41ly7jmr1fbro760wfy1k0' name='Life Expectancy' table='[&apos;Life Expectancy$&apos;]' type='table'>
                <columns gridOrigin='A1:D197:no:A1:D197:1' lost='0' outcome='1' processed='588'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='Life expectancy at birth' ordinal='2' />
                  <column datatype='integer' name='Date of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[]' />
              <expression op='[]' />
            </expression>
            <first-end-point object-id='GDP_B1BCB4D6209545219EBF59154B5CB489' />
            <second-end-point object-id='Life Expectancy_8E4AD5682002488BB5AB3A09AE2FC0EA' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='COUNTRY BASED ON RANK'>
      <table>
        <view>
          <datasources>
            <datasource caption='Life Expectancy+ (The Wealth of nations (1))' name='federated.0o1qqnj1af7kci13xq4q90bpxh7c' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0o1qqnj1af7kci13xq4q90bpxh7c'>
            <column datatype='string' name='[Country (GDP)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Life expectancy at birth]' role='measure' type='quantitative' />
            <column aggregation='Sum' datatype='integer' name='[Rank (GDP)]' role='dimension' type='ordinal' />
            <column aggregation='Sum' datatype='integer' name='[Rank]' role='dimension' type='ordinal' />
            <column-instance column='[Country (GDP)]' derivation='None' name='[none:Country (GDP):nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Rank (GDP)]' derivation='None' name='[none:Rank (GDP):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Rank]' derivation='None' name='[none:Rank:ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Life expectancy at birth]' derivation='Sum' name='[sum:Life expectancy at birth:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='MAX([Country])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Rank (GDP):ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank:ok]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='MAX([Country])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Rank:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</column>
            <column>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[Longitude (generated)]' field-type='quantitative' max='35525803.106435142' min='-25407627.217037778' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[Latitude (generated)]' field-type='quantitative' max='19714250.420115702' min='-10518269.752366692' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]' />
              <size column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]' />
              <text column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]' />
              <text column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]' />
              <text column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]' />
              <lod column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]' />
              <lod column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]' />
              <lod column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='3.0386741161346436' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[Latitude (generated)]</rows>
        <cols>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{4CC9003E-B517-487F-8C95-A96AE54E8EEC}' />
    </worksheet>
    <worksheet name='GDP-PER CAPITA BASED ON COUNTRY'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#e15759'>&lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Life Expectancy+ (The Wealth of nations (1))' name='federated.0o1qqnj1af7kci13xq4q90bpxh7c' />
          </datasources>
          <datasource-dependencies datasource='federated.0o1qqnj1af7kci13xq4q90bpxh7c'>
            <column datatype='string' name='[Country (GDP)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
            <column aggregation='Sum' datatype='integer' name='[Rank (GDP)]' role='dimension' type='ordinal' />
            <column-instance column='[Country (GDP)]' derivation='None' name='[none:Country (GDP):nk]' pivot='key' type='nominal' />
            <column-instance column='[Rank (GDP)]' derivation='None' name='[none:Rank (GDP):ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([GDP - per capita (PPP)])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Rank (GDP):ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]' />
              <text column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]</rows>
        <cols>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]</cols>
      </table>
      <simple-id uuid='{CD1D6D76-9D29-424F-A450-98A4AEF72B32}' />
    </worksheet>
    <worksheet name='GDP-PER CAPITA BASED ON RANK'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#e15759'>&lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Life Expectancy+ (The Wealth of nations (1))' name='federated.0o1qqnj1af7kci13xq4q90bpxh7c' />
          </datasources>
          <datasource-dependencies datasource='federated.0o1qqnj1af7kci13xq4q90bpxh7c'>
            <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
            <column aggregation='Sum' datatype='integer' name='[Rank (GDP)]' role='dimension' type='ordinal' />
            <column-instance column='[Rank (GDP)]' derivation='None' name='[none:Rank (GDP):ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([GDP - per capita (PPP)])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Rank (GDP):ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]</rows>
        <cols>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</cols>
      </table>
      <simple-id uuid='{21653119-5E5B-4E46-9AA6-20B3410891F1}' />
    </worksheet>
    <worksheet name='GDP-PER CAPITA BASED ON YEAR'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#e15759'>&lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Life Expectancy+ (The Wealth of nations (1))' name='federated.0o1qqnj1af7kci13xq4q90bpxh7c' />
          </datasources>
          <datasource-dependencies datasource='federated.0o1qqnj1af7kci13xq4q90bpxh7c'>
            <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
            <column aggregation='Sum' datatype='integer' name='[Rank (GDP)]' role='dimension' type='ordinal' />
            <column datatype='date' name='[Year of Information]' role='dimension' type='ordinal' />
            <column-instance column='[Rank (GDP)]' derivation='None' name='[none:Rank (GDP):ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Year of Information]' derivation='Year' name='[yr:Year of Information:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([GDP - per capita (PPP)])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Rank (GDP):ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]' />
              <lod column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]' />
              <text column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='3.7016575336456299' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:GDP - per capita (PPP):qk]</rows>
        <cols>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]</cols>
      </table>
      <simple-id uuid='{B0F5C1F1-B0FF-4575-A4DB-3B9BA58B287B}' />
    </worksheet>
    <worksheet name='LIFE EXPECTANCY AT BIRT BASED ON RANK'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#e15759'>&lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Life Expectancy+ (The Wealth of nations (1))' name='federated.0o1qqnj1af7kci13xq4q90bpxh7c' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0o1qqnj1af7kci13xq4q90bpxh7c'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Life expectancy at birth]' role='measure' type='quantitative' />
            <column aggregation='Sum' datatype='integer' name='[Rank]' role='dimension' type='ordinal' />
            <column-instance column='[Country]' derivation='Attribute' name='[attr:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Rank]' derivation='None' name='[none:Rank:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Life expectancy at birth]' derivation='Sum' name='[sum:Life expectancy at birth:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank:ok]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Life expectancy at birth])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Rank:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]' included-values='in-range' />
          <slices>
            <column>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank:ok]</column>
            <column>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]' />
              <tooltip column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[attr:Country:nk]' />
              <text column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]' />
              <lod column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]' />
              <lod column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]' />
              <size column='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[sum:Life expectancy at birth:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[Latitude (generated)]</rows>
        <cols>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{966B835C-2C6B-4F72-A493-F2B93BE38BE8}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98120' id='8' param='horz' type-v2='layout-flow' w='99034' x='483' y='940'>
            <zone h='98120' id='6' type-v2='layout-basic' w='89378' x='483' y='940'>
              <zone h='49060' id='3' name='GDP-PER CAPITA BASED ON RANK' w='48268' x='483' y='940'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49060' id='5' name='GDP-PER CAPITA BASED ON YEAR' w='41110' x='48751' y='940'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49060' id='10' name='GDP-PER CAPITA BASED ON COUNTRY' w='44689' x='483' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49060' id='12' name='COUNTRY BASED ON RANK' w='44689' x='45172' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98120' id='7' is-fixed='true' param='vert' type-v2='layout-flow' w='9656' x='89861' y='940'>
              <zone h='15864' id='9' name='GDP-PER CAPITA BASED ON YEAR' pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]' type-v2='color' w='9656' x='89861' y='940'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='52879' id='11' name='GDP-PER CAPITA BASED ON COUNTRY' pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]' type-v2='color' w='9656' x='89861' y='16804'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1300' minheight='1300' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='14' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98120' id='13' param='vert' type-v2='layout-flow' w='99034' x='483' y='940'>
                <zone fixed-size='280' h='49060' id='3' is-fixed='true' name='GDP-PER CAPITA BASED ON RANK' w='48268' x='483' y='940'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49060' id='5' is-fixed='true' name='GDP-PER CAPITA BASED ON YEAR' w='41110' x='48751' y='940'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='15864' id='9' name='GDP-PER CAPITA BASED ON YEAR' pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]' type-v2='color' w='9656' x='89861' y='940'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49060' id='10' is-fixed='true' name='GDP-PER CAPITA BASED ON COUNTRY' w='44689' x='483' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='52879' id='11' name='GDP-PER CAPITA BASED ON COUNTRY' pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]' type-v2='color' w='9656' x='89861' y='16804'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49060' id='12' is-fixed='true' name='COUNTRY BASED ON RANK' w='44689' x='45172' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{0A5987CA-C7B6-4F70-9596-7E929AE49B6D}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='63'>
    <window class='worksheet' name='GDP-PER CAPITA BASED ON RANK'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D7ED1407-C4FD-48C1-8002-D598577C62A6}' />
    </window>
    <window class='worksheet' name='GDP-PER CAPITA BASED ON YEAR'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[qr:Year of Information:ok]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C6EDE408-D90C-4205-8161-6D3F486550AB}' />
    </window>
    <window class='worksheet' name='GDP-PER CAPITA BASED ON COUNTRY'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{32DCF14E-4593-4282-93E0-5EA54660E933}' />
    </window>
    <window class='worksheet' name='LIFE EXPECTANCY AT BIRT BASED ON RANK'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F8D055AF-D6BA-4F35-91BC-3EE859AEACA4}' />
    </window>
    <window class='worksheet' name='COUNTRY BASED ON RANK'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country:nk]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank (GDP):ok]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Rank:ok]</field>
            <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BE30A516-6B6F-4F59-A9EE-7C64A2F2D52E}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='COUNTRY BASED ON RANK'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='GDP-PER CAPITA BASED ON COUNTRY'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[none:Country (GDP):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='GDP-PER CAPITA BASED ON RANK'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='GDP-PER CAPITA BASED ON YEAR'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0o1qqnj1af7kci13xq4q90bpxh7c].[yr:Year of Information:ok]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='12' />
      <simple-id uuid='{C043F509-BEE9-487F-A9DB-734C76AF6220}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='COUNTRY BASED ON RANK' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9aYwk2XWo98WSkWtlZda+b73U0tv09HTPkNOc6SE5pClKpKz3TEFPgiDj
      AYZhQZD1x34/DBj+ZRgwbBi2HiBBkv30aMgGAUriUBqTkmbrWXvfu/Z9r8p9j+36R1ZVV3VE
      VndzpmuWjg8YTFeeEzfOjbgn7n6uJIQQeHg8o8iftwEeHp8nngN4PNN4DuDxTOM5gMczjecA
      Hs806u4/hBDY2RTG8jq+nj7koIo+Oga+AFp/H5KqYCzMYuWKKC0dqI0xJAnApjI+gTAFvp4e
      5KAPfXwCIUCONqDGAuhzy0jBMFpfD5IsVe9nWxizM0ihetTWZjArGKsJfN0dSJhU7o4jZAWt
      vx85IGOmilDKYKaygIQcb0LraMFcXUKKNqOEtGq6ZpnK6BQoKr6+fpSghhAWxtwivr5eJAR2
      No2+vI6vtw9ZNqlMzoIkoTS3ISsWxsoGSkMzalsTkrRlr7AwZmaRglHUtiZEMYeVN/C1NmJn
      0hCJIisydjaJvrCKFIqg9XUjSRJCL2GsZ9C62hCWjrG0idbTgagUsE0VKnnkWCMIHStdRG2M
      HVwpeIbZUwNYKzNUZjfxDx7BzmXALGJsFPB1tZJ/+x1sS1Aem8Q/PIw1exdjM791pYk+t4p/
      6AilSx9i53MYySKBkRG0rjbM2XGkhk58jSEKl65vXSMoffQBcnMncqDqh8bYHQofX0VYAiij
      L2fwH+mncPEiQpQo355C7ehGDRiIQAtaRwtCCEo3rlK6fmsnH6K4iVmQ8R/pp/jBBwDYm0vk
      33oXM1dBVPIUb4zhPzyAnUpjJ5ewRR2BkRF8zQ3o4/dRew6BmaV47e5OuqWPPkRuaAU9SXl0
      Fmtpgtw7H2ObNvrYKLZhVfMxeRu57TBqPEDxkxsAVG5fp3DlBkIAeprsz97EzOvYyWUqyykq
      t69jmYLSxx8iVP9n/6Y9XNnjAOWxOYKnjmAuzGGXjQdKwQiB/mb0peTOb0pdGKGbe1OTZOSA
      BrZAWBZC1xGm9UAcjIBRqf5hFrDtIGpdECUWR5JAX88QPtlNZWHzQZqKD8mnQo3ZCpFfR4r3
      I4rpvSqWiZ3NgK9aK1TGpqn79W9TuTcOsoooZLAKFdT2lmo6plm117J3kvB1H0JkN7fSNbAr
      Emosgq93EGt9AYDgqSFKt8fcH24ogtjKr5EuEz4UQ1/NARA48wLla1d35wRrdQ7qOvDVB90z
      6/GZs7cPIEkgwNc7gDE/s1dTCJBkRDFL5f59bDWOr0GhfO8eVlHHSmxQuXcftXcQ2S9jJTfQ
      5+YwUxlAUBm9Tebv/z9C587uTXP7n0YeY2UDW7ep3LqBAKy1ZSr37uEfOYlUo7dSuXYdZIGd
      WMVIlXd+NzfWMDeSyH4/QljoCytYG0mMmQnwBYl851tYK3MUPr4GW/fS5+awcsUaj0p6YO8u
      u+VYG1JhA1u39mhX7t8k8/e/JPTSWUQlg7mygS1UyteuVFNT/fiiCkaysJWmjbG4gqRpNe7v
      8TTYU6yCQ70Ur9zFLhV3vu7CNLCyKSpLWfydcaRQlMDICP5DvcjBarNBCWkojc0Ejo2gdbYC
      oMSb8PX0oMaigIR/6ASh54co3byLEALUCLJSxthMY26so4+NEX791wiceB61TgELlNYOAseO
      4WuJuxovhMCyA0TOniT6w19Hv/eguaI0teDr6cbOpLATS2jHzxE4dpxAfzNmIoU+t4Kvqwcq
      1QKvtLTj6+lBiQRBgNB1jNkJ5KZ2qj0AFTksY6wn0SfvorT3PXhup49TunZ7j23+4VOETh2m
      dPM+lTt3ifzGbxI4eQbZ/6CG0U6eRr9ZdUAkhcALL0FmAX098yu8So9fBenhpRB2PoOxnsTX
      2YXkkzFmZkH14+vuRJIlrEwGpb7+oWRsrEwepT4KgLBMjPk5hAVypB4lGgA1gKypWMkEcqwB
      SZYQQmAuLSAFo0iajBypQ5Ik7HwOKRTEzpVR6iNb97CwcuVq06tcQKAh+VXsXB4lWgdCYOVy
      KNEowtLRZxZAkvB1doGtgxZCVmVEpYQQCqKYxcoU8PV0g6Wjzy8BoDQ0IasCYz2BEm/c2xkV
      AmN5ESlQh9IYg3IBoQSQfQrm6ipKSwuSLGMXsuCPIKsyZiKBpPqQo1t5y2aRwkHskokSCWIl
      N5FC9aAXkSL1INnYmRxK7OFn7PE0cDiAh8ezhDcP4PFM4zmAxzON5wAezzSeA3wBSa8vc+Xq
      dfK75mK2WVtb2/l3ZnOJUqnAzRs3yGRzXLt6haW1BKn1Za5cu8HayiIriexBmv6lQ320isdB
      MzN6naYj53j/g4/pagohtDqKyXUsNUh6c4X+/gGODg9z9eYoZqXEuZe/gaTnWEnrJNc+RPb7
      OXr0CNfuL6BaJdpf/+bnnaUvLF4N8AVE2BZvvvEGvQP9LC2vcW/0Dol0ifTmGsX0GjMrSWTJ
      Rkgypi3Irc/y8Y1RQMKvKVimzv2pFc69cAps85H3e5bxaoAvIN1HTnDkXBuL8ws0t7TQE60n
      qPoBG6RhsG1MWybqlzl66ixjU/OcPHGcqclxmtuPUx+AuqZOVCOLFmn4vLPzheapzANYloU3
      vfD0sW0TZLVmNV4pF5F9QXyKdKB2fZl4MgcQgkqljKxqSMLCRkaVJSqGiV9TQZKxLRtVVbAs
      C0VRnqLpHh6fnidqAtm2ydraGpl8CUWYmCiENRndMAiHg9hyAC0YoaPZW8vu8eXgiTrBkqxg
      mzrtHa34wzGiwQCWotHV0UwxX2JmcZWmhujTstXD4zPniWoASy+QTBdRQyaqKFORNOJBhfmV
      NJ0drXT2R9jYSNDZ1gzAf/zFTT65v+Sa1v/4X3yLupC38cPj8+WJHED11/H8mee2/mrZ+b25
      /YFOXTi08+9EtsTCuvtEjGV7nWSPzx9vHsDjmcZzAI9nms99IuzPf3aV65OrrrL/7Y/+EzSf
      N5Tq8fT43B0gmSuxvJlzlYlaO+E9PD4jvCaQxzON5wAezzSeA3g803gO4PFM4zmAxzON5wAe
      zzSuDmAYBu+///5B2+LhceC4OoBt24yOjnpO4PGVx9UBJEkiHA6zuLjIL3/5yz0yvVLGsiGf
      y5BIZbBMnUw2j2Ua2LZA1/UDMdzD47PAdSZY0zR+53d+x/G7sC3Gbn1C5/FXmB29T2v3YWY2
      VpAQpHw+bEkjHI3R2uBFOPb4cuDqAELYjN25yeziCsG6OGdeOEMkoCHJCh1tbQAcHRxmamae
      UCRMazzI0soma9kML3V2YlkWtm3vuy/YsixM09xfx7Qwve2sHk8RVwfQCxk2s0WGT52lLR5k
      PZEg0tmObemsbubQ7BU0q0ggHKEh4mdhPUdXZztdAxGSqRTtLU0AO0cLuaEoCqqq7q+jVnU8
      PJ4WrqXLFwhj2xZzU6P0fuMbdHdWQ5TLisax0y849BtbH/w7Egw8HUs9PJ4C7vMAkkxiaZq5
      uXl+8c6HB2ySh8fB4VoDSAj84Xr8gRjfvfD1g7bJw+PAcK0BhIBCLs3qwrRXA3h8pXGvARSF
      7u4epEgbL54+dtA2eXgcGO41gGmQKVZYX5xkfmnloG3y8DgwXB1AL+eRFD89PX2kk5vMLiwf
      tF0eHgeCqwP4I3H62htZXFwkkcrR0tJ80HZ5eBwI7n0ASeboyCm6+49gIxPy+w7arj38P2/d
      YXYl7fhdkiT+23/z8udgkcdXhZrTrNnVcf7DGx/R29XBD37tOwdpk4P7s5vccAmdIu8zi+zh
      8TjUdIBAXTOvvvQ8qYLznCoPj68KNR1g6u4VUnIHejl/kPb8Sti24OcfjbvK2hoinBvuPGCL
      PL4s1FwNWrEkMskVenp6D9qmJ8aybf7yH667ys4Nd3oO4FGTmnuCW7oPoxgFKoZ1kPZ4eBwo
      NXaEyUSUMnWdQ+RTa24qHh5fCWrWAGowzuLYNZYWF7k1On2QNnl4HBg1HcAopdnM68QaWzg5
      NACAEILF2UlKJqwtL7CwvEYutcn41CylQoaybpBIZg7MeA+PT0vNUaBgtJGXzzxHIl968KMQ
      CL1ASTfJFi1kkWOlAC2xAAuLK5QMOHzk8EHY7eHxmVDTAUqZDdR4J+Hyg+FFISxSqTQFfwKr
      lMFAJepXWFhJEKuPEIyESCTThNubDsT4J0E3LN740H2otKc1ytkhb6ToWaSmA0TbB+H6Vbr6
      j+78Jskqw6e/BrKM0tWEQEKWwbIEiiIB0hf2gOyKYfLXv7jpKnv1uV7PAZ5RajpAObOGEu2g
      t+PBQjhJkvBpzpAnu/et77fJ3cPji0btkAuyysSdD9hYX+G1l88eoEmfH+l8mf/1Jx+7ys4O
      dvDrXz/qKvP48lLbAWyTvKkw0lh3gOZ8vuiGxY0J9/PK2uJhADKFMr+8NOWqc7SniVOHWl1l
      Hl9MajqApChYpQwzSxsMDg0dpE1faDL5Cj/+p9uust/8xhCnDrUyOrfJrWn3CcQLp/toiYWf
      pokeT0BNBzBKecLRBkzTWw36pNydXef/ruEkI73NtMTC3J5e4/7spqvO62cHiNcFn6aJHlvU
      dABZ8WEZOplCmluj0zuTYR6fDTcn1/jJO/dcZWcG2z0HOCBqOkC4qYcf/asuZNk7Q8Pjq8u+
      pXt8/P5B2eHh8blQswYQQjA4OHKQtng8xLXxFcYWEq6y73/tCHXB/cPQe3Myj8Z9Q4xt8uYb
      f4cUaeV73/rGQdvkscW18ZWayzdeOdWDblj82//pZ67y75wd4A//03OUdZOJRXcnaqoP0f4M
      DXO7UcMBbJLJTXLLa/xCUbz4oF9iNtIF/ru/eNtV9oOXB/m33z/N4nqWf/93l111vvl8P99+
      4as7AFIjNKKPEydOspbM0751IIbHV5eSbnB3dsNVdnygBYDVZJ61VMFV50hnA6HA5xs651fF
      vQawDCr4+eY3z3Ht2lXgq/sF8Hg83ro2w//71l1X2f/8X73Oka5G/uGjcd6/Ne+q8yc/+hot
      8TA/fe8+l+8vuer8u989T30kwPu355lbdcaBAvjPLhxD8ym/WiZccK8BZIXcxiL/8A+LhOPe
      1L7H47GaLHBvzn1yb3tv+UoiV1PHsGwAPr67yMUajvSb54fQfAr//V+97bpfva8txn/5w+oh
      Lv/uz/7ZNY3B7kb+8187jRCixiiQsOkYGGZl9j7FcslVxcPj82R0PkFZN/fVuV/D0YJbkQ7L
      ulnrhBiJhZlJugaGUGuMpK2vLDI9v4ReLrC4vIZRKWFYNvl88fFz4eHxOeMeFUJW+cb5r1Op
      mLzyitswqGB+YZ5IOMzc3CI+u8j8wgKTk9MY4vE3xTxSTzxa53HuJYRgX63Huc92OvvpPUq+
      y57HutejlT7VfbZ1HvkaPoP3BOLR93qC97CvzmO8h215zZngYCTGiePHCPldWkkCTp95kc2V
      RYSiEghomLpBKpvH51MRQjzymFT7cY5Ste2qzj5Fwd7SqcW2Lbb1GDp27RhID3QeJ51H27vv
      s3lMHeuxbNlPx360jr31Lh8rT7XT2bnPvnl6dJnY1tmPx31PlmXvsx9gXwTLC7MEo3Ea6/ys
      JnL09HTR6w+Tz+aIBOIIIfadiZQVBUVRHnGUqlzVYf/jVvd5N0iShKIoKErtVR+SXNWR5dqj
      C/JOOrV1JFneSmeffG/p7Jvv7XT2fX7y/rZI23naJ9+S/NjPRtovT9vvSaqdjiwrj5HOY5QJ
      ef93ADxS/qBM/KoOIMl09x3a+TMaf7AJPtAY/5WS9PD4PPCWeno803gO4PFM4zmAxzON5wAe
      zzSeA3g803gO4PFM4zmAxzON5wAezzSeA3g803gO4PFM4zmAxzON5wAezzSf2gHKhSxzC8vo
      5QK6aZHNfvEP1vbw2OZTO8DC0ioh1WB+foHRsUmE8uWMDuDxbPIr7gd4gCTJKLKMsG0quo0X
      jMzjy8SndoD21gZWEwW6e7rp8YUo5HMQ8n8Wtnl4PHU+tQOEow0cijbs/O2Px7C2tjse6Yyj
      G+479xUZLMtisLuBmpuEhMCyLEb6GgkHnKZKUjUNIWxePt7lmsShzjiWZSFL1NQ5sqXjU6Sa
      OgPt1Xz5fXJNnd7WKJZl0dEYqalTF/JhWRY9LXU1dYJ+Fcuy6Gurr6njV2VUuXaeDm3ZG/Ap
      NXX62qr2hvxqTZ3u5josy6K7uba9oR17ozV1Aj4Zy7IYaI/V1FFlCcuyONrVUHNLoyRVy8RL
      I50YpnMLa2dT1V6o/Wz6t56NhEAST+lYR8uyHrk17bPQ2d7fuZ/OQdnyRdP5ItnyWenYto0k
      Sftum7QsC1mWH6mjKMrTGwZ9OBOGrmM/5Gu7dYRtk81k99WxTIN0Jrtn0/T2/s7dlMvlPdvo
      H5aXigUy2dy+9ppGhXyhVFtH2GTSaTLZ/D73EuSyGcyHNuTvybcQ5LL75FsIdF0HISjkc1i7
      NkBv6wjbRjeMB7ou9zENHcsWGHqZfKG0Y/Nune13VCoWKJTKtXW27C6XyzXtFUKQzaQplSu1
      84SgWMjvaSU8rGPoFVKpFKVyNV+7C7awLXTDxDINsrnCTrnYva/YtkwM08Iy9D3vc/s+BzIP
      ICyDWzeuUKjU3qlfyGfIZtaYrRHJGKBcKpLdXGR+NVtTx9KLvP/eR+wXMmns/l0y+8Yvsrl/
      9w6JlHt4vm0MQ2dyyv3APID8xiLz6ynGJ2dq6qwvzpFMp5icWXSVlwpZrt+4Sym3ydzSOtOz
      zohpiY0FxscXyGdT3LztdqaDzej1GySLFVLJFNNT4xjWwxW/xZ1PLpM1bQr5HKP3Rx0RHIQw
      ufHBJ5SAzZUFbt0bc7X32o07GKUM9+5PukZvK+TS3Lh1j2ImwejENIVSxaGTyyS5dWcUYVsU
      s5ssrDrLxdrqNFNTq0xOjLM6O06y9PC9BKvLk8zMbDA1Ncni9ChZfW8ZPBAHkBQfHe37h1jU
      fD5yRUFXe0NNnWDAT7ZQwe+rbfbY/fvIsiCddQ/kCoL+gcOk11apffqZRUWHfGoTvZbPSjJB
      H7R39dWOWSFrGKU8Pl/toeG6+jqKxRKlortDBiP1NNRH0MtFmjt6kHEWqKbWdvyqQqS+gVgk
      5GYInZ3tVI8yt6hvaMXn6HgpOzo+RcZGcgSjkSSVzo42hG0wMTVPIZPCfOj5BCP1NNbXofrD
      DPR3sbzkjAMajsaJ14Up5NKEonFWV50nc9bFGqkPB9ECIXRTor/bGaS5raMDVZLwKTIV0wZH
      WBaJ9s5OZCAcClIp5R0f4U/dCX4cLKPCxmaKEmHqXDICkNhYBwSlcgUt4n4+ViaTQdUC+PYJ
      jjpy6gzNq6vEo7VOYhRkUkl84cg+mffR0lxPyVJqRsYDKFRs2lqiNeWq34+mqgSDgdp30gJI
      QtDb1+sqz6UTpLNp4k0DbM6P0dDm7NitLi2TzqXZWA+QzqZJ50rEdp8xZhusJDaRygJRTOIL
      1TvD1lg6q6kUQTWAZhYIhUIOxxZmhfVsmvJKkq9/4zyrqyuoD32L8pmqvRubSVKpFPWxZh4m
      m9oknU3T0HwIkV2hvslZJtKJddLZNJl8gWA4ik9xvoil+WXSuTLtrXVUTBu/+lC5EIKFuSXS
      OZtYfRx/rIPWyN63/tQ6wR4eXwa8tUAezzSeA3g803gO4PFM4zmAxzON5wAezzR7xoSEEFir
      S5ipLEpTG2pjhPLNu0iBAL6ePpRIkMrEKMKwkcL1aD2dW6s/bcq37oCqojS2Vq+7cx9J05Cj
      DSghGX1xHUnzoQ0cQtaqtxV6CX16DgJhtN5u0POUp1YIjBxBwqB09Q5S0I/a1oXaEMRYySKJ
      IsbGJqCiNLeidbSgT48hN3aj1oe20i1QvjOBFNC2ro0ibJPy7fsETp1AQmCuLmMmsygt7Sgh
      icr4HJKmojS3IVlFzM0MUjCM1t+7E9FYGGX0qRnQQmh9PYhcAiNRxj/QhbW+jtTQhLw1Lmiu
      LGKm8vh6epFDPvTJKQQK/kOHQM9hVVTUWAhzZRWlvZXKrVtox04iywJjbQOsCuZGAiQVpaUN
      imnsioEUrEPr68JYXELr7kIYJcxkEV9r44EVmi8rQgiW5qZYT+YYODpEnV/aWwOYs6MYefAP
      DyEHfGCVsXIG/iOHKH3yIbZho88t4h8ehtwy+mpm+0qMtRT+4SH0sVvY+QJWwSQwMoLW1Ya1
      PIvc3I2/t4Pipavb5lD8+BK+/kP42qrRpfX7d6lMTCJMG6hgJsv4hwYpXb+KEGUqE/OoHd34
      IhJE2tE6WhBCoE9NU755+0FGyyksw79zLYC9Nkvl/ihGsoQoZSlPreAfOorskxGZNYQaIzAy
      gq+5AWN2GrX3MGosQOGTazvpFj/6BLX3EGpEpnRrDGttjuK129i6hTE7jb21OMtcmMBIm/iH
      jiD5FEqXPkZp7UbraKLwyRVEdh196xA4Y2ICGzDmJijdvA/CojI5ja+zBzUIUqwdrb2ZyvQc
      /uFhZDtNZXYDa3kGI1mgfOM6aO7zJh57WRi9xkpR4blTJ/CrMm//8z/tdYDKzCqBI52Y87MY
      y+s7v0s+jUB/C5WlXdPRtkB6OK68AJBAAiuTxlhewco8WHMjTANJ2ap0jBxCDiP7fciBIJIE
      RiJP+GQ3leldM4OPOGdApBaRGgYQ5eyemUs7lcCYmUYOVyeqyuPzRL57AX10FHwBKKcxFteQ
      66oHRVvJzaq9u9eLNLZBaTtdHWEqKEENpaUbO1N9PsHTxynduLPHpsr0Ev6jPUiyguzXsIsG
      Sn0IOVIPhvuZa1J9G1JpE6vm1PNWfg0TSVUIPP8C5UvvYek+1Ljb7K/Hw9wcX+TMSD+yohLU
      ZAqmvNcBJEVC2ODrHcBcX95zsa0byH4/opilcv8+UnM/vjoo37uHVdSxEhtURsfwn3ge2Sch
      +XxIwQCSTwUEldHbZP7xHYIvPFdNUPaB9WBaX5TTGBtprIJF5f5tBGCtLVMZnyR49lzNjTbl
      m3dAMhD5BPraru2Ymh85GkXoZYRtYqysYy6vY8zPgOon/M1vIvss8u99VM27plXtfXg2cWfJ
      gALSVuEUNtveJoUbkO0cVvHBwgpJkRG719pI0tbZPlTX18gyYivvQoidGdfg6ZOUr99yzaeo
      FCm+989U1m20rkYkXxAlouE/dmKf40M8dqPJEvr2YkJJRuKhPkDgxCDFj6/i72lD2NXHaqWT
      6HOzGEmT0GAUPRQlMDLy4JqREUBHaWwmMDIMgCimEIaOKJawhQxI+IdOoAylKXx4icg3XkJS
      gigRqEzNIqkydmqVyHe+h68hhLWZRJgCpbWDwPDQ1p32rt6EraXQhIg8fxxxvI/Cx3fxt75Y
      lekVREVH6AbW2hz+514mMNQNlQzGWgJ7cx25Loy0taxCVCqIYgmhamDbmKsrmAs51I7+rQKm
      oMZDlCemoZjENzAI5eoCtsDpUyT//X/A/9JL1b9PDlO8fBWtpx05HEXraKR8fwJZ0VFau5Aa
      OhF3PkGPCmxJ3SnAUqgeWSqiuyxjkvwhQq98i8rVjylPzBE82oscDCKpB7Ka5SvB1148xdtv
      XWSwv4NIvJmeljrnUgihV7BLZeRIHchgZ7IgK8h1ESRJwq5UkP0P7/gS2BUD2a9V/xI2djZb
      /eL5/NVOr6wgKTJ2uYTkDyBJ1cP0RD4Hqh9JkcDnq/6u6+BTEbq5kybY2LqFrPkQpgEooEgI
      w0DWNBBiq5bSELaFnc0BEnIkAsICxYckSwjLBCEhTB1RMapNIGFh56q1hxQIIskCu1hG8geR
      g7vyKgR2IQ+KhhT0g2mApCIpEnahgBQKPViqa+jYxTJyXR2SLGEX8wihoISr7XVh6tiF0gO5
      Xs2HsEyEbiEH/dV8SlvPbeu5CyEQ5QpyMIAw9J18eTweeqVEvlihvr4eWfLWAnk843jzAB7P
      NJ4DeDzTeD0oj2eC7S2cDx8b6znAAWKbFW7evE3XoUGaY3WuOvlcllBd1FE1L8+M44u1sTwz
      QV1TO8XkMoYUYPhID1ev3aKtq5diIc+JY8NPPyNfUhRFQdO0Pb95DnCAXHv/XbpeuEBIT/D2
      O9do7eygUtSxrTKFdAodjcT8OKde+RbTd64RCDfQ2RKnZ/gU96cXaAjMU9dzAp8Cc8vrnBnq
      5MPL15EDDdy5dYOWaJCcPkid5rVsHxfvSR0gmk+hVK6wOHGb5oHjTI3dY2V1jYXFRfIlE72U
      p6m1jc72Jmx/PS88d4RbC0kCqgBJQlVkTCFz9colAPSKjqb5mJsa58Wvv4Lmk6gY+88ke+zF
      GwY9QIRtMXrvLm3d/SzPTdNzeIil2XECdQ0Et2bMI0GVtXSZcCiAJgzGlgu89Nxhrn50kYHj
      Z1ibnyQUb0PPrmMqYQ71tJIpmjTWh3j7nYtceO212oHGnmGEEBiG4WgCPTUHsG3b0eHweDIs
      00BW1OrkoG1hiWot4IYQNpYlUB9eyuEB1HaAJ+oDCGGzvrpKONaIbJUx8BHWZFK5EvFoCEnR
      0CsVgsEAXsXy6VHUB+FUJFnZ92VJkoy3KuLJeWIH8AcCTE9NoCk+BAJFhoAmk89ImPiINTQT
      9FbnenxJcHUAIWxuXb3EykYSXyDCmXPniIUDyLJKMZ9BVX34tCCyMDCBWH2Q5ZUE69ksXV3d
      O8Fxt2uBX/ziF+i6TiAQ4PXXXz/I/Hl47Btr1NUB9EKWWGsPR048jyYL1hNpYuEAllEmV9AJ
      19WjWiV0AjQFFZY28nR3d9Ljj5DNpGltbty5sW3bxGIxAoEAuVwOWZYdfYPl5WXa29v3Xffv
      4fFpqNUkd+0EC8vgzX/8B/DX8Wvf+davdMPdUX63/z0xMcGhQ4ccDvCzn/2M+vp6IpEIp0+f
      9jrPHp85T9QJFkCpkCGXSPGLdz7kuxe+/qlu/Dd/8zd0dXUxNTXFwMCAQ2dkZIRDhw6Ry+W8
      0SOPA8XVASRJJhyOEG5t/VSFf5vvfve7lEolWltbXQv3xsYGo6OjGIbBd77zHTtQzFUAACAA
      SURBVFRvOMPjgHD91ArbJJFMMDt2m3+++MmnuoFlWYyOjnLv3j1mZ2dd22LhcJjNzU00TcPv
      2Gzj4fH0cK8BFB9dHV1Q18bLZ099qhvIsozP52NwcBDTNF07urlcjoaGBnRdx7IsrwbwODDc
      awDTIFsqs74wweSM80CGJ7qBLPPSSy/R399PIBAglUo5dGzbpre3l87Ozj0nnHh4PG1cR4Eq
      hQwzi6uoioIvEKI+EiIWiz1RwtsjP7Zt8/Of/5x4PE4mk+H73/++oxbYPvcpk8mQz+fp6nI/
      3MzD41fliUaBfIEgqfVlktkiqk/j5PPneLLi/wBJkohEIgBEo+6HSczOzrK0tITP5+P55593
      yIvFIrlcjmw2y+HDh735Ao/PDFcHkBWNr52/UD2UDZloXeRT3USSJObm5jh06JCrfHR0lO9+
      97tcvHiRSqXi8NLLly9TKpVQVZXe3l6HHKoeXiqVCIW8IFEej0/N3mZm+T7/188vMdDTwW98
      7zu/8g2EEKTTaYLB4NaZvs5IbyMjI/zkJz8hFArt1Ba7icfjNDU14fP5XM/bevvttymVSkxO
      TvIHf/AHNWsaD4+HqekAoXgn3zl/js3Crk6pEKyvLuGva0SxSlTQiAZkNlIFWhrqQNWolMqE
      ww++wrIs84Mf/AAhBLOzs673GhsbQ5IkGhsbyeVyjgKcy+XY2NhA13X6+/sdTvDqq69y+fJl
      VFX1Cr/HE1HTAe5cfodluxW7/CAim22b+ENRluankWUNCYtNSSIa8jG/kMYQCk0tbew+nk4I
      wY9//GN6e3uZmpqiv7/fca/u7m7C4TD5fN61CROJRJiamqK5udl1iPS9995DVVUuXLjwZLn3
      eOZxXwph20haGCudo6u7Z+d3SZJZW16kp6+ftdUNZGFiAuFQgGwuyUZWp6u7x7Ea9Ld+67cI
      BoOcOnUKIQSmufcU32KxSKVSYWFhgVQqRTwe3yPP5/M7I0WW5Twm1LZtzp49y6VLlxgZGfFq
      AY89PPFqUCSJ7kPHWL10CaRdJ7UbZXRTkM4UCGmgE6IlqLCczNPT00WvFiGXzRJuqp71+7cX
      x7g2seJI/sXhLn54fnDn77q6Ok6dOsXAwACBQMDxlc9kMgQCASKRCLZtOzrB/f39XL58mXw+
      TzAYrDmRJoRgc3OT5mbn0Z0eX21qrQatsRZIwmemiPWdIr0xixCHkCQJ1R/m+IljDv36xpad
      fweaHhx0vbiR5e7MhkO/u6UeAKNURC/k6GqMoWeStNSFoFKkZOkEYw8OfPje976HbdtkMhk2
      Njbo7Ozck97ExMRO/2B6eppjx/baOD8/z82bNwmHw1QqFb73ve85Ho5t26yurtLW1rbvF8Ot
      E+/x5aVmH8AXamL9yscIIbgzPsOJQecqzk9Lfm2RtXtXHb8H6hvoe/m7O3/fvHmTYrFIoVDg
      tddec+i//PLLrK2tkUgkXIdaOzs70TSNSCTiOhOdyWT48z//c/x+P6+//joju6JfAxiGwebm
      JlB1tldeeWWPXAjBlStXKJfLNDQ0MDIy4jrZB9UJwv1Ojvc4WGquO7bNEivrSYQafCqF/0lI
      pVI7HWS3PoAQgubm5p25gIeZmJjgnXfe4S//8i9dV6PGYjH++I//mM7OTgYHBx1ywzD44IMP
      yGaz5PN5h9y2bTY2NnjppZdqjnS98cYb/PVf/zU/+clPXPPg8flQswaQEBw6fIRC2f1Ek4Ok
      v7+fcDhMsVh0bd+//fbblMtlTp8+7VpAtxfihUIh2tvbHfJMJsPf/u3fkkqlGB0ddTShAHp7
      e0mlUhw9etQhk2WZlpYWrly54jrKBVUn294W6taEWltb4/79+wQCAU6dOkVw18ZqIQRTU1Os
      rq7S2NjI0NCQI4319XXK5TKaptHY2OioZSzL4sqVK4TDYY4dO1azGbfdVn5Wmnk1awCjUiTW
      1kc85Jx1PWimp6dZW1vjgw8+cF0s9/3vf5/XXnuNeDxOQ0ODQ37r1i3u379PuVzmo48+csjr
      6+v50Y9+xKFDh1xrgFwux8zMDNPT08zNzTnktm2zvr7O888/z8zMjGseisUiiUSi5mK/8fFx
      yuUyUN0i+jBjY2MIIZiYmHDt0F2/fp1Lly4xNzdHIpFwyD/88EM6OzuZmJjg5s2bDvna2ho/
      /elPeeONN7h8+bJDXi6Xefvtt3n33XdZW1tzyG3b5oMPPuDixYtMTEw45EIIbt68ycWLF7l2
      7ZprHjY2Npienq4pz+fzvPvuuywuLu4bdcTtI1iLmjVAtGOYyN1bdA6feOzEnhbnzp0jHA6j
      67prB/Xy5csUCgXK5TItLS2OUZ5YLMaFCxewbdu1cKRSKd5//31aWlq4ePGio58hyzLt7e28
      +OKLru13WZY5cuQIP/7xjzl79qxrHqLRKF1dXRw6dMj15XV1dbGwsMD8/DzHjx93yLu7u8lk
      MnR2drp+nfv6+tjc3ESWZerr6x3yoaEhbt++zYsvvuh6fT6f5+zZsxQKBVZXVx3yyclJenp6
      aGpq4tq1a7S2tu6Rbw9lf+1rX+Odd97hyJEje+RCCBYXF/n2t7/Nv/zLv7gOJly7do1cLkdP
      T4/raN17771HS0sLV69eJRaLOVYNXLx4kWQyyezsLL//+7/vGE53o2YNUE6v4m/sob350Yk8
      bT788EPeffddLl++7Np+PnbsGC+88ALf/OY3aWtrc8h7e3tpbm6mpaVlZznGboLBIIFAAF3X
      aWpqclyfSqXo6Ojg0qVLTE5OOuS2bTM/P8/AwAArK85hX6h+3VpbWzl69KirE2/PncTjccdk
      oBCChYUFzp49y9ra2k6Hejfz8/P4/f49HfbdbH8V7927x9jYmEPe1tbGvXv32NzcpKOjwyEf
      Hh7m6tWrvPHGG5w8edIhD4fDKIrCn/3Zn7kuaJRlmUOHDvGnf/qn9PT0uPbFBgYG6OzsZG1t
      zbXw9vX1kcvlOHnyJIFAwCE/f/483d3dDA0NPVbhh/1ig0oyF//p57z1/qXHSuhpcurUKV55
      5RV++MMfun6BFxYWuHbtGm+99Zbr1+vq1au89dZbJBIJjh8/7vjybIdreeWVV1BVlUqlskfe
      1dVFV1cX58+fp76+3uFAiqLQ1dVFPp+v2QdoaGhgeHiYjz/+2LUAt7a2Mjw8TDKZdNgnyzId
      HR288cYbRCIRVwcaHh7mxIkT6LruOhEYjUYZGRnhwoULjq83wMzMDIODg8iyzNLSkkN+48YN
      BgcH6erq4tYt50F++XweIQR/9Ed/xNWrzpE927aZmpriT/7kT5ifn3d9Bvfu3SOZTDI/P++Y
      LIVqU3h6eppPPvlkp7m4m7GxsZ3IIxsbzuF3N2o2gYSlI/xR2hrCtVSeOubCZazZi8QAYxzi
      gDUBdn0X2skf7ehFo1Ha29vRNM3VAXRd5/z584yPj1OpVBzzCMVikffee29nMd7D2zI1TaNU
      KnH9+nXq6+tpaGhwdMYHBwfp7u5mdXXVdT3T+fPnkWWZoaEhVldXHV/Zy5cvYxgGZ8+eZWxs
      jKGhoR3Zdh/DMAwsy9oTcWOb2dnZnYJpGAYPo2kahUKBhYUF1zby4cOHdwqxW+CCw4cPA9Wm
      WC7nPLAwEokQCoX48MMPXYeiJUmiq6uL999/v2YN8P3vf59Lly7thNF5mIGBAV544QUSiYTr
      h7BQqJ4uKISgWCw65G7UdADFH0S1CiytZ3hoWPzAsFZvoV/5K8fvStcLaCd/RNm02cwbEG4i
      D6CD1tDJUqZCZ/2DQnzixImdkSK39UKGYaDrOqFQyPXBLS0tMTY2xsDAANPT0wwP743Bb1kW
      f/EXf4EsywwODrrWAttLQDY3N+nr63PIjxw5QjKZJBQK0dLSske2PcoUi8UwTdO18LS0tDA3
      N0djY6NrDbCyssL6+jrNzc2uDjI9Pc3i4iLHjx/nzp079Pb27pGPj48TCARYWloiEok45KZp
      kk6n0TSNK1euOAYTbNvm+vXr9PX10dra6toH+OSTT1hbW0OSJAqFAuHw3o/v2toay8vLTE9P
      u47GNTU1kc/nsSzLdTDEjdrzAIZOKBxF3hWMVQhBNp1AtyCT3GAjmUEv5VlYWkWvFDEsm1ze
      5YzPp0SqaPIvk2nHf+9MZfbojY6OMjw8TF1dHbdv33akE4lEqK+vJ5FIuBbOnp4egsEgt27d
      4sQJ56CAoij89m//NpFIhOeee861k/nTn/6Ujz76iPfee881L93d3Zw6dYp4PO46knTixAmO
      Hz9OX1+fa/V+9OhRfvd3f5fz588zP+/cxnr06FHOnz/PkSNHXJtxQ0NDRCIRbty44dqGb2tr
      Y2pqigsXLrh2slVVpbu7mwsXLvDcc8855JIkcebMGV599VWy2azrMygWixSLRQzDcG0CbU8w
      Dg0NudYAk5OT5HI5Ojo6mJ6edr2Hw+5aAr2UJV82SIzd5lZzCyeHBkDYLM+O0XL0HBsbGSQs
      kkAsorEwn6FsyXR0dT86MK4Q1eM+91XZPlm6trz2ffbKnnvuOe7evcuLL76IoiiO6zY3NwmF
      QhiGwfj4uKOJtLKysrMc+86dO46OthCCd999F5/Px8cff+wa/vG5557biYrn8/kcNty7d4/1
      9fWdLaG75UII3nzzTTo6OlhYWOA3fuM3HNd/9NFHrK6uIkkS3/72tx3yO3fuIEkSw8PDO82r
      3TqSJHH69GmEEExOThKPx/fUNNv9oO3rthcn7mZoaAghBKqqUiqV9jRjJEnaGd3y+/1sbGw4
      Rnm+/e1vA5DNZkkmk46arKWlhddee42NjQ3m5+fp7u7eI3/55ZdZX18nk8nsTIw+ipoOUN8x
      xO/9aHBPJiVZoblxK+yhqiILMAG/5iOTLZIrmKhbBWz3atCHEbAldz/MYed6u8b1gn3TZyt9
      LB2u/xUScBzgzvtVGcDx34ZAdaSgqamJdDpNf38/wWDQ0UHbHuGIRCLE43GH3LZtisUiuq6j
      qqprB29ycpJEIkFnZyeGYTj6ENFolI6ODhRFYXNz05FGPB4nn88Tj8d3ns9u8vk8hUIBTdPQ
      dd0hTyQSDA4OcvHiRYaHhx2jXZOTk9y7d49KpUJjYyPHjh3bk8b8/Dy3b9/mzJkzVCoVxweo
      XC7z5ptvMjQ0RLFYRNM0hw1LS0uYpsn9+/d5/fXXHfKpqSnu3LlDY2MjL730kkM+Pj7OvXv3
      aG1t5dy5cw758vIyTU1NdHZ2sr6+viPfL9DavvFHJibGOHp0V2fM0tnIVNDYIBpUqBCiOSSz
      msjT3dNNrxYin8tRF4zvu2hMkiQURUGW3A3blps1DJekarNDlmstKahej5Cg6Jy0qSJAUbj2
      y/+aUr46dLl78PDIC39IS88rLI3fwTINTh95sCx8aewWTV39hKIxbMtEBn70r/81OzWPbSPJ
      MvKujmpvby9NTU1UKhXX2Eejo6MEAgFOnz7t6ITats3y8jKHDx/m5MmTrrPhg4ODtLa2srm5
      6TpSdOTIEfx+P6qqEovFHPJ4PM7LL78MwOrqqkO+XUNMTU2Rz+cdclmW6evrwzAMZmZmOHfu
      3N6nLQS3b99mZGQEIQSyLDvSmJubo6enh2w2SzabddQQCwsLtLW1UalUqFQq1NXtPWdtdnaW
      zc1NSqUSZ8+e3ZP+E60GBbBMk76+vb15WdEYOu4cA66LPfia+Bs+/3mDJyGXmqKYcc7uGuVq
      P+LiT/6SYjbtkH/z9/6QvhMvsHzjQ/JrzmHDhoERWoZOQXIKEuOM+GAnssDEmxBqhM4HhSQY
      DPLSSy/tDDfufrlCiJ1JtOvXr3PmzBnHV21qaopsNks0GiWfzzucbHZ2lkKhwPHjx7l165Zj
      wq5SqZBOp1laWnKdC4lEIpRKJSqVimMQAKp9gObmZiYmJlzlAMePH2dhYYGGhgbXodyhoSGm
      p6cJBoM0NjY65IODg8zMzBAOhx0dZKiOEnV3d1MoFPZd0bubmpHhfvGPf88/v/fhYyXisQ/Z
      RVj8yPnfxj0AbMuiUirywvPPYRk6J46NoKkKerk6GlUxTUqmyYnnn0cJBBg+eZKiYVB+aCTn
      1Vdf5ciRI4yMjLgWnjNnzqAoCuPj45w65Qx2FgqFdmZi3WruVCrFBx98QFtbGwsLCw65YRhc
      v34dSZJc5xGEENy9e5d0Os3m5qbrF3l0dJRSqYSmaa4z9tvLRSzLch3KXVpa4uLFi1y5cqXm
      osSHqbkjLJ1KklvZ4Beq7zOJD+rhzvLkPX75V/+L43ctEOT3/od/z//5yUf87I5z4unC4SP8
      N9/6DrmlFOu3FgEIAIX5DabYwBfW6HllEKEb2HMb+IALPVtf5rlNLEAeaENSZAxDJ1pXx7/5
      nd/ZSd/Q9Wo/b6umOXz4MKFQiFwuxze+8Q2HPaFQiFdffZXFxUXX9VSyLPPaa68xMTFBX1+f
      a7v86NGjlMvlnb7Wwxw+fBjTNAkEAq41QDweZ2VlxXUxYy3cw6KoPl555RVGpxYZHh5yU/H4
      gmDpJuW0c+7CtrY6iIaFveT8mgLI/dUZ4Yu/+EfXJSbPf/0bNDa3MPnmg6FjFZiauQNA19cO
      EYiF2Pzf/w+MhaoTNgHbd4v+8AeEX/46m5N3ya1Uh2brgMTNJRJApLWT5qMnYX0dpifZmVlI
      JWBhDoIhOPUcmzNrrNx90EwtA+mbKwRjYQ6fP4ah66Q2N2iK1dMUqwe7mpf15SVaOvaO6D2M
      qwPYlsn00gbffO1VPvjoYzpbz++biMdXm4qLgwHYZrWgmSurGC5zD/bWjLFZLlLJOftR/ujW
      Vz6dgnt3nTeIxeDUc2RXk0x/NOoUdzZy+PwxCvkcNy9/7Grj6z/8V66/b1OjEyyRXp3nb/9u
      DSX0q8aE8/D44uPaCZYQHBo5TSyseGfOenylqTnQvjw3TVN7H9ojQpXblkmpVMa2LWyXkCce
      Hl9k3KNCyCqvXHiV5dVNhkb23xAzMzWJYZqEQgFsOYA/FKG9yWs2eXw5qDlH7A9G6O/vw+97
      xISCotHZ3kQxX2J2cZXGuBeUyuPLw6c+jS4a0phfSdPW0cqZU8fY3HQfcvPw+CLyqc8iam7v
      onlXoIW6cHBnoVQo4CMWca57CWpqdSZQVpA1p1z2aVW5GqguGXgYf3U5r4QgoDp76aosVa8X
      gK/Whh4JhMDnj6EFnLOKklK1wR+uc13cJqvVPMiqzzUP0vaqU9nnboMaBCGQFZVAxFlraoHq
      cwz6VGK7IkRsE9p+RrKE4ne+RllTdlbcihq1ePUZCXyaH9llHkCSqs/RLf0thep7iESQXJZI
      o1VtlBTV/T1vPUMUBVw2wOD3V5+RqqCFnXJfSNtZc+ZzewdS7TVAOzpuJ8R8WmzbfuRxp09b
      /iidxwn/8Xnn4dPKH5XHT/sMvwxyeJD/xz4h5tMiyzKSJO3cWAib1eUl1GCU5ob6HaO25bZl
      sra2hpA12tuakR6Sg00qmcK0BI1NjchbsgdywfrKMiXdIBSN0xyv1hCKojzIvF6mVDHwawH8
      fp+jcGwvJNvN9j0so8Li0gqSLBMI1dHSFHfJg8Ha6jqoGm2tbnmAXDaDZUtEY1Hkh+RC2FTK
      ZbL5Is3NTY7rhW1RrlTIF0o0NTU65OnEBulcAQmJtq4u/KriyGO5XKZczBOsi+P3PXg22//P
      ZbOEIhGUXQVq9z3K5TKmXgY1SCTk3yMXwsYwzOqONUUl4Ncc15tGmYopEQ76XdO3jDJLy2sg
      yTS1tBAK+B3PMLmxSsmU6Whr3iPbeQ7pNH4FdClAfeRBrVHrO//UTqTebXQpvU6ZIJsri1gu
      8mJylYKtEq0Lu14PEoFAkOTqKrpwk8NmMk0sJHHr6n0qOAvfzPQkS/MLzM4v7Vy/W76xNMud
      e6Oksg92tG3LZcWHXsgTbWxic2PNIQcobK5QRKMuUisPZS6/9T6j07MYLnLbLHLz8hVm51dd
      5UYpy81rN5hfWMV0kYejEXLZIj50ckXDNY+zUxOsri4wt7DhKpeEyY2rl7k/Po3tUnvMz86w
      sLzK0sKDWd/dDqyXy6ysrpHdtWd4zzMQFreuX2N6Zh7bRV7OpTGVAPlMmumZWZdnaLCynsXM
      pcgbliMPxXyOxNoCH165h6Y93rf9QI5kD0RiVHKbqMGI6w0D0QZkvUAm69xsXUWQTqUIxhvQ
      arRYmhtjbOZsnj97DLdQXtFoPQLo6HRGhgMIhMNY5RLFsjNwlSTL9B3qZ3F6kniTM6ICQCDW
      hChlSWXc81ApC4bPHiegqDg38wmSiQyheJx4NORSLQtSmQLhaJT6aAi3Fr3PF6S5IUSyYFEf
      dg9mFq0LEgw10NDoPlKXTCZoae+hq7UJt61KzQ31qP4QsbhzmFuWVYqpddYzRZIuYVmq2ZDQ
      FJWiS0QHgFCsGauQwBepp7fbbQ2Pj/qwTN6SCanOp6D6fPjDcc6eOY76mDO4B+IAlWIOyRdC
      LxZcHqxFoajvaa44MZm4eYfFlQdfv4dZXlomEAwSDAZxS6Wcz2Ii1YzMZtoyimxRKVVc5WvL
      y0Tjjfh97l+WSi7DwvKaa0wegEI+wfxCErtcxLklHerqgihqGLtScs1jOORDC9ZjloquhRMs
      NhNZ4jGXzui2DaUC6ysrZNLukdPyhQzrCzOsZ01UtyXR2Ty5xDrJlPue3saOLoKiTLDOfR7I
      tgx8fh+FQsk1D+VsEgM/dWH3o7LAIJkqEotGXDfLav4A6Y0VllfXKOuPNyF7MDVAtJGQYhJv
      bnG5oYIPnbnFdYqFfI1dwCp9R/vwyapr4QZo7+igUixg1dhGGY03EvQpSDV2oQWDYY6dPEU4
      6P71DIZDFPIFKq4OJFD9frq72vD7XUYzgIamTpoaggTq611qAAl/KE5YM7G1oKs8XN+MJgpI
      gbBrDQASqipTLBaxazyDpqZO+g8P0NTgfuhhW8cAre2ttDbXucqbmprp6e2lrdX9fIXUyjJ1
      ze172vh7kekZGORQV5vre1QDAUy9TKlUrlEOZFS1unm+1o7yuvoIpXSakvF4YzsH4gDF1DqT
      M8vVqGYuctUfIKTJVAy7RgE3KVkaLXVBrBr5qm9oJB5R2Ei5B/NNJFI0NNST2Ew6ZJZRZnpy
      krGxSXxuw3GAhES5XKJYcFsZaXLpk6usr2/uCWq7F5twJIqlV1yfgW2WyOQNYnXuXzejlKOg
      Q31duGaoAGHq5PJ5TBcHMCpFbt26QzKxSani/nUUZonV9U3yRWctKITJzes3SaaS5AruzzhY
      F6GUy1J2aUYCJDZWmJycIF2q1NiJVd0qWSumTz5fpKGxcauWr/EplDUkDMoueXBVfyytT0kw
      2sDg0V40LeB6w4XJSeRgCL1cy/M1JDNLsmLW7AOszM9wb3qN1ib3r1t7ezPTM4t0djlDJyq+
      AI2NdWRSqZrVu26YaJpaownl4+ULr9LaUEfS5fyBbWzbRhLusS4kRQVhksu714KKT8M29X3C
      zghUn4ZRKWOYzjF9nz9Eb08rhXwJUaOpmUqmCNXVU+dSC0qSysBAL+VS2XVeBMAXDNMQqyOf
      d+sHCRR/HW0tDYQCftc8bgdBqDViE4kEyWSLNDc3otQoB0G/n2hTGw2xWh+ivRxMHyCfIV3Q
      aWp0bxt2Dhyir6uDjq6OGn5dYXl6Gd0wdkaBHqaoC54b7GRtw70Turi0zrGRw8xMzbo2EWIN
      rTQ3xQiHnDWAZVSwkKmP1tPS4lb9G3x08QPyFYvGmnuiBZl0hlBdnetDF5ZJYnmNZDZbo4Yw
      SKxukMpkXOWZZIpgNEZnVxehGhNXkupHkU0qNb7QgUAIv9+PXMNBTGQ0tXY/qhoPoFb9JNEQ
      j7K6uEwi7dwbAPb/39yZdbdtXVH4wwxwJkWJ1ExKVuR4xXWcxE7T5iXp/+5DV7pWMzWJ48qy
      VFlSZImDOIEjiLEPdtJYvLBkOXG8X0ESvBc4OPvss3EvZ/UW66vLGIJ9oJ9BJpgO2dnZw405
      z3mrTSqVQlWudmu/kQDQLItB55xOty9O7+MBu/tPaDaawuNhqHH303vk06mYDCBRzCd5fNJj
      pSxWOHKZBI8fH4AU4V7oeo56LZqtNlM/olGrcfH5qWgGCV3BHjpMRqIA0/j0s8+4c/s9Kqtx
      QQy9bi/WLSvJGlu3NrFisqSs6mxuV7EMcZGfLRRQFI2VlWV0gUICYOgWt+/ep7Is6K4DvW4H
      TdeJG4Bpmmzfuk1G0JWFZzKmZCTZqK4Jj4dBgGEZTEZiGqipMl988U9004ylwp16Cy8M8AJx
      Fvq5CXtVvJEA8KcO2WKZYDoW3uDJwgLFbJJ0Oi0c+MNv/8X3P+7iB2GMAhJx3rYp5w0abTFF
      6PUHSESoqoF5Qcnpd3uUVitU1sok01lhkRmEId3zOiNHpOG4fPn3f3B4VqPTtWNoXICmW6RS
      ImtGRKfdBtWgWMgJ5iCi0+kiqzpz+WxsgHWbZ+zs7uF44uVivMmAR4/3sIdiDl9eWqRv20Kh
      IIp8jg+esL+/j2qI6EUEqs6wXafWnK2zACRZwkrnuXP7pmCOJRYWl/n8b5+zuDC7KgVAGKrc
      /vgD8tkMVkyQm5rM/v4+g7epBtCsFHI4xUqJ0/+4e46cyFKcE9OH2x9+zFZ1hW5HPLG91jl+
      GDEce5iGeGIWSoukUgkyudkMUV6v4nQb1NtjquuzNQKALCt89OdP2L5RERzV2dyu0Kqd0rHj
      NmeQyc/lyWYzgjmQyBeyBNMxp2dNQZBL5LJpvKnDWb0VE2AR48EAmUgYpKPhkGQ2TyaVjKUH
      zVaPrbUCJ7VZijJs1ti48z7Dvk1f0K/x3RGHx2f0R1OGtrgOUjQDZ9Dhp9O6YAwSke/w34Mn
      7O7u0mjOmiofff813z3YwfUCwphZ8CKFO3fukEuJs9RFvIEA8Pnmy69xpv6zlrngE2YmR6/2
      lHpTvKT1j//+ilrLZmFe/GTIFedRiVB1EyumA9is10mmUhw8ekCj86LK0wqsegAABtRJREFU
      IMkKK2sVquurqDG+ElWVePzoETXBhQHQlYhyZRt3ZAuPg8x4aHN2VhdmMUlS6Q8dlpcXhE94
      WVEZjR2WFudiMoBENp9jOHZIGLNCajKVolmv47quUCp2pw6ZVIKdgybL5dlegqLpHD56yPr2
      e0SBKAtGRCFEgUcYif+h54yQjTTuaCC8DwLPRdZMJCRsQRDdev8eNzfXsLsd4kqNuXyWVquF
      61+NBv0uXqCLp/jg/n1OT45pdW0qldWZT0zsLmNPIuFMiJiloH/66JNLz+K6UzTf/6WFfxEL
      83O07AHr1Q0S1qvt0ui7ExrnPUxDI846mF5YoXt8TLG8GEtRpv0RyWJRcPEjaqdP0U2DsVBi
      jDg7PUPTNcZjcRcVfNrdEcVilsHIwdJnqZbrTpE1Q6iyBL5HSIQz7jOaTGcK6UShxL3Csy74
      XLoy831VT3P3w9n1hv6PkGazhe+5KKomnCMjlUOrn6OmMlTXZzvB//nhG5xIZ36+GPuqbs9u
      QGDROB+ysXr5Im1vIAACvvvqS3zVoLy4Ihx4IjfP0vwYzcrE3jyXQdP1574Q8fHBcISMRCKd
      I/2KAaDqFluCtW5egASJZOYlTaAI351Sb7RZe77I7K+/vLwm3ljj5+Orlct26lR4591bRN4Q
      3RSPT38+RyLY7QZHJ02Wl5axBBlkOh7w7fc/Ml+cI5B0bm697P+KkS0sIGsDJEX8/5x+m9DI
      sFTMC1d2e+/ufcG3XkQ6leWnky63NsVy+EW8gQCQufvxJ89922J6cbj7kL6cQBq3WY3pEl6G
      YjFPhE4QxugHnkso/3778w4ap+wed5jLmNx89+YMtzw5OqawtoIXIC6y/Qk7D/ex0hmqm5UL
      n4k42t+haXtIYcjd+x/MXLhRv8ODB3vM5ROspmepYrNWZ2lpGTlhMuyMyaZeLGQXlqsUys/U
      G1WdnScjkaa6usTQ8YRrm14Fw9EYZzRg7EmUF2c9VUYqi/90jwYRG6mE4Bd8Hv6wg5FIUtms
      ol2gq82zY0ZThULOwo9RiS7iDdQAEpqmoes6mia2MqxubJFNGL/YfK+DbrfJ4cEh/cEsRZgM
      hxRKZRKWhRajHrweIjBTpFQfzUwKx2D3R/TtPupkgkinkiQJ1xPr6z9ngKSpYVgxEqFiUFlf
      Il8skRRkgKHd4fDJE54cHtEfzs6RrCjouo6u68gx/EKSZUJktGvdNRHddoeFpVXk0BPWQe54
      gJLIMRmIex0g4Xnx6k6vN0BVZXRLpdMU9Rpm8QYywGWIGPZaRFqSfE7sQbkKMpkFZNUhm5l9
      OoXeBMVM0z85QbPSZK6WHV8JiqJS3dzEj8lAKytLTN0AJBmRiChJGumERUgUW+RqmoqpiQPA
      spJY1pBktiB0Qla2tgme6+NXXTj2IiKg3aihrV1n43SFjY1VTmt1lqsbQseraiaJ3BZGUuwa
      BplsOoUbiSpFuLH97q/G+BbZoV+OCMcL8SZDzmqz+3td+VdCnzCShF3MyXDIk71HFJbW6HXi
      rQrXh4Q/7HH4tM7p6ewevwC5QpFSuUSpNC+kQGEwodfu0mrbQjdo6E8ZjKaYpph+yPKzF3d2
      HjxgKPD6yIrCeNDj+PiEKwokM5BknU/++hes66UArGSGGzdukEuLeyH1WoPz8xaaqsaJnPRa
      HTqdHlOB3UNWFDRNQ9O02Cx2EW9BBpDJZVL0uw5TZyxUga4CK5nGD/p4An1sbqVCsuhgmgZF
      QR/gt0B6vsx81CEj5K6XQ1ZMCqUibigLA0Q1UpSK2ZdYDcAPAmRFQRFc/MD3OD45Y6NS4uin
      Ju9siPsdcYgin5OjI/qDPnMLs9uo/haQFQVFUVBkWXgP1OsdKjcq7B03MK5odbj0nL/Jr7wm
      zEwWp29TeI0aQNM0dC2i35/lt5IkPXMQSjLqNdP/yxFwfHjMaGDT7sa91PNyhKGLPXTIZsVK
      mDuxOXh8RKvbFfJjz/OQZZX58iKW4CX4qTNB02R2907I5V+dA05HDlu3tkkkEsIAe31IlBaX
      uHf/Hotlsd261z7nqNZmeS6Dc900dgFvQQYAp2/T7Q+IFJnFculaQWAmkmi6huv9Hjf4ZVCo
      XtgZ/ZURhaiqjilUWCJcD6rvrNEdiK3Eh0+OMZQQJ3DoDAvMpV/shCZSGSQCdBn69piFVwwC
      M5WieXiA64cYievXavGQhDvf/Bpb2zcJIglZun4dcxFvQQCEKFaWm1uVWAXlMtidNh17QOCP
      UY0y2ez1aMgfCUlWCX2XiTNF1L6RVYVUpoBhiC3j+UyCnhNSypvoAh0foLS4znQ8IB1jObkM
      YeAT/oGkQVG1mJeBro//AdzNlDpw/BmNAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='GDP-PER CAPITA BASED ON COUNTRY' width='192'>
      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
      /x/tdG49qs1zhQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='GDP-PER CAPITA BASED ON RANK' width='192'>
      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
      okpdHwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='GDP-PER CAPITA BASED ON YEAR' width='192'>
      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
      /33dz+N9VlG9AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='LIFE EXPECTANCY AT BIRT BASED ON RANK' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
